{"version":3,"sources":["components/MovieItem.tsx","pages/movies.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MovieItem","props","width","height","style","padding","src","Poster","paddingBottom","Title","Year","Movies","useState","searchVal","setSearchVal","movies","setMovies","nominatedMovies","setNominatedMovies","backgroundColor","value","onChange","newValue","onRequestSearch","apiUrl","fetch","then","response","json","data","Search","Grid","container","spacing","item","xs","sm","map","movie","onClick","length","alert","disabled","id","imdbID","some","filter","m","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAWaA,EAAY,SAACC,GACtB,OACI,gCACA,qBAAKC,MAAM,QAAQC,OAAO,QAAQC,MAAO,CAACC,QAAS,QAASC,IAAKL,EAAMM,SACvE,sBAAKH,MAAO,CAACI,cAAe,QAA5B,UACKP,EAAMQ,MADX,MACqBR,EAAMS,Y,SCHtBC,EAAS,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACnBC,EADmB,KACRC,EADQ,OAGEF,mBAAkB,IAHpB,mBAGnBG,EAHmB,KAGXC,EAHW,OAKoBJ,mBAAkB,IALtC,mBAKnBK,EALmB,KAKFC,EALE,KAuB1B,OACE,sBAAKd,MAAO,CAAEC,QAAS,OAASc,gBAAiB,WAAjD,UACE,0DACA,cAAC,IAAD,CACEC,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAcR,EAAaQ,IACrCC,gBAtByB,WAC7B,IAAMC,EAAM,oCAAgCX,EAAhC,+BACZY,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLA,EAAKC,QAAUd,EAAUa,EAAKC,cAmBhC,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,UACI,yDAA4BvB,KAC7BE,EAAOsB,KAAI,SAACC,GACX,OACE,qCACE,cAAC,EAAD,eAAeA,IACf,wBACEC,QAAS,WACwB,IAA3BtB,EAAgBuB,QAClBC,MACE,6DAGJvB,EAAmB,GAAD,mBAAKD,GAAL,CAAsBqB,MAE1CI,UA/BUC,EA+BiBL,EAAMM,OA7B7C3B,EAAgB4B,MAAK,SAACP,GAAD,OAAWA,EAAMM,SAAWD,MACtB,IAA3B1B,EAAgBuB,QAmBN,yBAtBW,IAACG,QAwCpB,eAACZ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,UACE,2CAECnB,EAAgBoB,KAAI,SAACC,GACpB,OACE,qCACE,cAAC,EAAD,eAAeA,IACf,wBACEC,QAAS,kBACPrB,EACED,EAAgB6B,QAAO,SAACC,GAAD,OAAOA,EAAEH,SAAWN,EAAMM,YAHvD,oCC/DDI,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ab5c80d9.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Movie {\n    Title: string;\n    Year: string;\n    imdbID: string;\n    Type: string;\n    Poster: string;\n  }\n\n\nexport const MovieItem = (props: Movie) => {\n    return (\n        <div>\n        <img width=\"100px\" height=\"100px\" style={{padding: \"20px\"}} src={props.Poster}></img>\n        <div style={{paddingBottom: \"10px\"}} >\n            {props.Title} - {props.Year}\n        </div>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport SearchBar from \"material-ui-search-bar\";\nimport { MovieItem } from \"../components/MovieItem\";\nimport Grid from \"@material-ui/core/Grid\";\n\nexport interface Movie {\n  Title: string;\n  Year: string;\n  imdbID: string;\n  Type: string;\n  Poster: string;\n}\n\nexport const Movies = () => {\n  const [searchVal, setSearchVal] = useState(\"\");\n\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const [nominatedMovies, setNominatedMovies] = useState<Movie[]>([]);\n\n  const onRequestSearchHandler = () => {\n    const apiUrl = `http://www.omdbapi.com/?s=${searchVal}&apikey=f939c0a3&type=movie`;\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        data.Search && setMovies(data.Search);\n      });\n  };\n\n  const isMovieNominated = (id: string) => {\n    return (\n      nominatedMovies.some((movie) => movie.imdbID === id) ||\n      nominatedMovies.length === 5\n    );\n  };\n\n  return (\n    <div style={{ padding: \"20px\" , backgroundColor: \"#f5fffa\"}}>\n      <h1>Shoppies Movie Nominator</h1>\n      <SearchBar\n        value={searchVal}\n        onChange={(newValue) => setSearchVal(newValue)}\n        onRequestSearch={onRequestSearchHandler}\n      />\n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>\n            <h2>You have searched for: {searchVal}</h2>\n          {movies.map((movie) => {\n            return (\n              <>\n                <MovieItem {...movie} />\n                <button\n                  onClick={() => {\n                    if (nominatedMovies.length === 4) {\n                      alert(\n                        \"You have nominated 5 movies. You can not nominate more!!!\"\n                      );\n                    }\n                    setNominatedMovies([...nominatedMovies, movie]);\n                  }}\n                  disabled={isMovieNominated(movie.imdbID)}\n                >\n                  Nominate\n                </button>\n              </>\n            );\n          })}\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <h2>Nominated</h2>\n\n          {nominatedMovies.map((movie) => {\n            return (\n              <>\n                <MovieItem {...movie} />\n                <button\n                  onClick={() =>\n                    setNominatedMovies(\n                      nominatedMovies.filter((m) => m.imdbID !== movie.imdbID)\n                    )\n                  }\n                >\n                  Remove\n                </button>\n              </>\n            );\n          })}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Movies} from './pages/movies'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Movies/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}